# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: alexelshamouty
app: sweaty-duck-backend
# Serverless Framework can deploy multiple types of templates:
#   1) Traditional Serverless Framework templates
#   2) AWS Cloudformation Templates
#   3) AWS SAM Templates.
# This is useful if your organization is using these different templates and wants one tool to standardize around.
# Here, we use Serverless Framework Compose (serverless.com/framework/docs/guides/compose) to deploy three different template types in a single deploy command.
# Deployments happen in parallel by default. You can also share outputs from one Service to another, across template types.
# In this case, Compose will auto-determine the correct order to deploy each Service.

# Example stage-specific parameters you might need in your services.
stages:
  default:
    params:
      domain: "https://sweatyduckz.netlify.app/" # This is the value of the "domain" param in the dev stage
  prod:
    params:
      domain: "https://sweatyduckz.netlify.app/" # This is the value of the "domain" param in the prod stage

layers:
  utils:
    path: utils
    name: utils-${sls:stage}
    description: "A layer for common functions"
    compatibleRuntimes:
      - python3.11
    retain: false

services:

############################################
# Authentication and infrastructure
############################################
  dynamodbTable:
    path: dynamodb-table
    params:
      userTableNamePrefix: users
      blockTableNamePrefix: blocks
  users:
    path: users-confirm
    params:
      tableName: ${dynamodbTable.TableName}
      tableArn: ${dynamodbTable.TableArn}
  cognito:
    path: cognito
    params:
      userLambdaArn: ${users.UsersRegisterationLambdaFunctionQualifiedArn}
      userLambdaFunctionName: usersRegisteration-${sls:stage}-usersRegisteration


############################################
# Admin Logic
############################################
  getUsers:
    path: get-users
    params:
      tableName: ${dynamodbTable.TableName}
      tableArn: ${dynamodbTable.TableArn}
      cognitoArn: ${cognito.UserPoolArn}

############################################
# User Logic
############################################
  getUser:
    path: get-user
    params:
      tableName: ${dynamodbTable.TableName}
      tableArn: ${dynamodbTable.TableArn}
      cognitoArn: ${cognito.UserPoolArn}

############################################
# Handling Upload Logic
############################################
  uploadPhoto:
    path: upload-photo
    params:
      tableArn: ${dynamodbTable.TableArn}
      bucketName: sweatyducksco
      tableName: ${dynamodbTable.TableName}
      cognitoArn: ${cognito.UserPoolArn}
  cdn:
    path: cdn
    params:
      cdnBucketName: sweatyducksco
      uploadLambdaArn: ${uploadPhoto.UploadPhotoLambdaFunctionQualifiedArn}
      
############################################
# Handling Block Logic
############################################
  updateAddBlock:
    path: addUpdateblock
    params:
      utilsLayer: 'arn:aws:lambda:eu-north-1:034362059781:layer:utils-dev:9'
      tableArn: ${dynamodbTable.TableArn}
      tableName: ${dynamodbTable.TableName}
      cognitoArn: ${cognito.UserPoolArn}
      blockTableArn: ${dynamodbTable.BlockTableArn}
      blockTableName: ${dynamodbTable.BlockTableName}
  getBlockInformation:
    path: getBlockInformation
    params:
      utilsLayer: 'arn:aws:lambda:eu-north-1:034362059781:layer:utils-dev:9'
      tableArn: ${dynamodbTable.TableArn}
      tableName: ${dynamodbTable.TableName}
      blockTableArn: ${dynamodbTable.BlockTableArn}
      blockTableName: ${dynamodbTable.BlockTableName}
      cognitoArn: ${cognito.UserPoolArn}
