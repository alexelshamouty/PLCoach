# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: alexelshamouty
# Serverless Framework can deploy multiple types of templates:
#   1) Traditional Serverless Framework templates
#   2) AWS Cloudformation Templates
#   3) AWS SAM Templates.
# This is useful if your organization is using these different templates and wants one tool to standardize around.
# Here, we use Serverless Framework Compose (serverless.com/framework/docs/guides/compose) to deploy three different template types in a single deploy command.
# Deployments happen in parallel by default. You can also share outputs from one Service to another, across template types.
# In this case, Compose will auto-determine the correct order to deploy each Service.

# Example stage-specific parameters you might need in your services.
stages:
  default:
    params:
      #domain: "dev-api.acmeinc.com" # This is the value of the "domain" param in the dev stage
  prod:
    params:
      #domain: "prod-api.acmeinc.com" # This is the value of the "domain" param in the prod stage

services:
  # Framework: AWS CloudFormation
  # The service name here will be used as the underlying cloudformation stack name.
  # Make sure it’s unique so it doesn’t collide, and accidently update another stack.
  # If you change it, make sure you update the references in other services.
  shared-resources-example:
    path: cloudformation
    params:
      # We are passing a simple string parameter to the CloudFormation template.
      # If you open the template file, you will see that we reference it with ${param:tableNamePrefix}
      tableNamePrefix: users

  # Framework: Serverless Framework Traditional
  users:
    path: users
    params:
      # We are passing a reference to the shared CloudFormation stack output to the traditional service.
      # The shared CloudFormation stack is deployed first, and the output is passed to this service.
      tableName: ${shared-resources-example.TableName}