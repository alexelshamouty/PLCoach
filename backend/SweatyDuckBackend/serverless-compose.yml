# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: alexelshamouty
app: sweaty-duck-backend
# Serverless Framework can deploy multiple types of templates:
#   1) Traditional Serverless Framework templates
#   2) AWS Cloudformation Templates
#   3) AWS SAM Templates.
# This is useful if your organization is using these different templates and wants one tool to standardize around.
# Here, we use Serverless Framework Compose (serverless.com/framework/docs/guides/compose) to deploy three different template types in a single deploy command.
# Deployments happen in parallel by default. You can also share outputs from one Service to another, across template types.
# In this case, Compose will auto-determine the correct order to deploy each Service.

# Example stage-specific parameters you might need in your services.
stages:
  default:
    params:
      domain: "https://sweatyduckz.netlify.app/" # This is the value of the "domain" param in the dev stage
  prod:
    params:
      domain: "https://sweatyduckz.netlify.app/" # This is the value of the "domain" param in the prod stage

services:
  dynamodbTable:
    path: dynamodb-table
    params:
      tableNamePrefix: users
  users:
    path: users
    params:
      tableName: ${dynamodbTable.TableName}
      tableArn: ${dynamodbTable.TableArn}
  cognito:
    path: cognito
    params:
      userLambdaArn: ${users.UsersRegisterationLambdaFunctionQualifiedArn}
  lambdaPermission:
    path: cloudformation
    params:
      userLambdaArn: ${users.UsersRegisterationLambdaFunctionQualifiedArn}
      userPoolArn: ${cognito.UserPoolArn}