AWSTemplateFormatVersion: '2010-09-09'

Resources:
#### User Pool #####
  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: ${sls:stage}-SweatyDuckUserPool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: gender
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: weight
          AttributeDataType: Number
          Mutable: true
          Required: false
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      LambdaConfig:
        PostConfirmation: ${param:userLambdaArn}
#### User Pool Domain #####
  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolId: !Ref UserPool 
      Domain: "testydomainduckduck"
      ManagedLoginVersion: "2"
#### UI Customisation, otherwise the login page will fail ####
  UICustomization:
    Type: AWS::Cognito::UserPoolUICustomizationAttachment
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ClientId: !Ref UserPoolClient
      UserPoolId: !Ref UserPool
  UIBranding:
    Type: AWS::Cognito::ManagedLoginBranding
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolId: !Ref UserPool
      ClientId: !Ref UserPoolClient
      UseCognitoProvidedValues: true

#### User Pool Client #####
  UserPoolClient:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      ClientName: ${sls:stage}-SweatyDuckUserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      CallbackURLs:
        - ${param:domain}redirect-login
      LogoutURLs:
        - ${param:domain}logout
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - profile
        - openid
        - email
#### User Pool Groups #####
  AdminsGroup:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: admins
      Description: Admin Group For SweatyDuck
  CoachesGroup:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: coaches
      Description: Admin Group For Coaches
  AthletesGroup:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: athletes
      Description: Group For Athletes

### Lambda Permission ####
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: '${param:userLambdaFunctionName}'
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - UserPool
          - Arn

#########################################
# Outputs                               #
#########################################
# We are outputting the table name so that other services can reference it.
Outputs:
  UserPool:
    Value: !Ref UserPool
  ClientId:
    Value: !Ref UserPoolClient
  ClientName:
    Value: !GetAtt UserPoolClient.ClientId
  UserPoolArn:
    Value: !GetAtt UserPool.Arn