# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: alexelshamouty
app: sweaty-duck-backend
configValidationMode: warn # This is from now till the end of life my dearest friend

# Serverless Framework can deploy multiple types of templates:
#   1) Traditional Serverless Framework templates
#   2) AWS Cloudformation Templates
#   3) AWS SAM Templates.
# This is useful if your organization is using these different templates and wants one tool to standardize around.
# Here, we use Serverless Framework Compose (serverless.com/framework/docs/guides/compose) to deploy three different template types in a single deploy command.
# Deployments happen in parallel by default. You can also share outputs from one Service to another, across template types.
# In this case, Compose will auto-determine the correct order to deploy each Service.

# Example stage-specific parameters you might need in your services.

stages:
  default:
    params:
      domain: "https://sweatyduckz.netlify.app/" # This is the value of the "domain" param in the dev stage
      fastapiLayer: 'arn:aws:lambda:eu-north-1:034362059781:layer:fastapim:2'
      mangumLayer: 'arn:aws:lambda:eu-north-1:034362059781:layer:mangumm:4'
      utilsLayer: 'arn:aws:lambda:eu-north-1:034362059781:layer:utils-dev:24'
      tableName: users-dev
      tableArn: arn:aws:dynamodb:eu-north-1:034362059781:table/users-dev
      blockTableArn: arn:aws:dynamodb:eu-north-1:034362059781:table/blocks-dev
      blockTableName: blocks-dev
      cognitoArn: arn:aws:cognito-idp:eu-north-1:034362059781:userpool/eu-north-1_kx8XYWEzC
      trackerTableArn: arn:aws:dynamodb:eu-north-1:034362059781:table/template-dev
      trackerTableName: template-dev
      cdnBucketName: sweatyducksco-dev
      cdnBucketArn: arn:aws:s3:::sweatyducksco-dev
  prod:
    params:
      domain: "https://sweatyduckz.netlify.app/" # This is the value of the "domain" param in the prod stage
  dev:
    observability: true # Turn on observability in the dev stage
    
layers:
  utils:
    path: utils
    name: utils-${sls:stage}
    description: "A layer for common functions"
    compatibleRuntimes:
      - python3.11
    retain: false

services:

############################################
# Authentication and infrastructure
############################################
  users:
    path: users-confirm


############################################
# Admin Logic
############################################
  getUsers:
    path: get-users

############################################
# User Logic
############################################
  getUser:
    path: get-user

############################################
# Handling Block Logic
############################################
  updateAddBlock:
    path: addUpdateblock
  
  getBlockInformation:
    path: getBlockInformation
############################################
# Handling Templating Logic
############################################
  updateTrackers:
    path: updateTrackers

################################################
# Handling Activity Tracker Logic
################################################
  activityTracker:
    path: activityTracker

############################################
# Handling Video Management Logic
############################################
  videoManagement:
    path: videoManagement