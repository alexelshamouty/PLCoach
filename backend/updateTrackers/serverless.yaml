service: updateTrackers
app: sweaty-duck-backend

custom:
  warmup:
    officeHoursWarmer:
      enabled: true
      events:
        - schedule: cron(0/5 8-21 ? * MON-SUN *)
      concurrency: 3
      verbose: true
      logRetentionInDays: 3
      folderName: .warmup
      cleanFolder: true
      prewarm: true

provider:
  name: aws
  runtime: python3.8
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: "${param:trackerTableArn}"

functions:
  updateTrackers:
    layers:
      - ${param:fastapiLayer}
      - ${param:mangumLayer}
      - ${param:utilsLayer}
    handler: updateTrackers.handler
    name: updateTrackers-${sls:stage}
    memorySize: 128
    timeout: 60
    warmup:
      officeHoursWarmer:
        enabled: true
    events:
      - http:
          path: /getTrackers
          method: GET
          cors: true
          integration: lambda-proxy
          authorizer:
            name: cognitoAuthorizer
            arn: ${param:cognitoArn}
      - http:
          path: /createTracker
          method: POST
          cors: true
          integration: lambda-proxy
          authorizer:
            name: cognitoAuthorizer
            arn: ${param:cognitoArn}
      - http:
          path: /updateTrackers
          method: PUT
          timeout: 60
          cors: true
          integration: lambda-proxy
          authorizer:
            name: cognitoAuthorizer
            arn: ${param:cognitoArn}
      - http:
          path: /deleteTemplate
          method: DELETE
          cors: true
          integration: lambda-proxy
          authorizer:
            name: cognitoAuthorizer
            arn: ${param:cognitoArn}
    environment:
      TABLE_NAME: ${param:trackerTableArn}
      TEMPLATE_TABLE_NAME: ${param:trackerTableName}

plugins:
  - serverless-plugin-warmup